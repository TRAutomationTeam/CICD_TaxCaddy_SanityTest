name: Development workflow

on:
  push:
    branches:
      - main
    paths:
      - 'Configue-CICD.txt'

env: 
  PROJECT_FOLDER: ${{ github.action_path }}
  ORCH_URL: ${{ secrets.UIPATH_ORCH_URL }}
  ORCH_TENANT: ${{ secrets.UIPATH_TENANT_ID }}
  ORCH_CLIENT_ID: ${{ secrets.UIPATH_CLIENT_ID }}
  ORCH_USER_KEY: ${{ secrets.UIPATH_USER_KEY }}
  ORCH_ACC_NAME: ${{ secrets.UIPATH_ACCOUNT_ID }}

jobs:
  print-details:
    runs-on: self-hosted
    steps:
      - name: echo-default-env-variables
        shell: pwsh
        run: |
          Write-Host "=== ENVIRONMENT VARIABLES ===" -ForegroundColor Yellow
          Write-Host "Home: $env:HOME"
          Write-Host "GITHUB_WORKFLOW: $env:GITHUB_WORKFLOW"
          Write-Host "GITHUB_ACTIONS: $env:GITHUB_ACTIONS"
          Write-Host "GITHUB_ACTOR: $env:GITHUB_ACTOR"
          Write-Host "GITHUB_REPOSITORY: $env:GITHUB_REPOSITORY"
          Write-Host "GITHUB_EVENT_NAME: $env:GITHUB_EVENT_NAME"
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "GITHUB_SHA: $env:GITHUB_SHA"
          Write-Host "GITHUB_REF: $env:GITHUB_REF"

  cleaner:
    runs-on: self-hosted
    steps:
      - name: Clean workspace completely
        shell: pwsh
        run: |
          Write-Host "=== CLEANING WORKSPACE ===" -ForegroundColor Yellow
          Write-Host "Workspace path: ${{ github.workspace }}" -ForegroundColor Cyan
          
          if (Test-Path "${{ github.workspace }}") {
            Write-Host "Removing all contents..." -ForegroundColor Yellow
            Get-ChildItem -Path "${{ github.workspace }}" -Force -Recurse -ErrorAction SilentlyContinue | 
              Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
            Write-Host "Workspace cleaned successfully" -ForegroundColor Green
          } else {
            Write-Host "Workspace directory doesn't exist yet" -ForegroundColor Green
          }
          
      - name: Verify clean workspace
        shell: pwsh
        run: |
          Write-Host "=== VERIFYING CLEAN WORKSPACE ===" -ForegroundColor Yellow
          if (Test-Path "${{ github.workspace }}") {
            $items = Get-ChildItem -Path "${{ github.workspace }}" -Force -ErrorAction SilentlyContinue
            if ($items) {
              Write-Host "WARNING: Items still present:" -ForegroundColor Red
              $items | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
            } else {
              Write-Host "✓ Workspace is clean" -ForegroundColor Green
            }
          } else {
            Write-Host "✓ Workspace directory clean" -ForegroundColor Green
          }

  config:
    needs: [cleaner]
    runs-on: self-hosted
    outputs:
      build: ${{ steps.get_build.outputs.build }}
      run: ${{ steps.get_run.outputs.run }}
      deploy: ${{ steps.get_deploy.outputs.deploy }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          force: true
          
      - name: Debug - Repository checkout verification
        shell: pwsh
        run: |
          Write-Host "=== REPOSITORY CHECKOUT VERIFICATION ===" -ForegroundColor Yellow
          Write-Host "Workspace: ${{ github.workspace }}" -ForegroundColor Cyan
          Write-Host "Repository contents:" -ForegroundColor Green
          Get-ChildItem -Path "${{ github.workspace }}" -Force | ForEach-Object { 
            Write-Host "  $($_.Name)" -ForegroundColor White
          }
          
          # Check for config file specifically
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          if (Test-Path $configFile) {
            Write-Host "✓ Config file found" -ForegroundColor Green
            Write-Host "Config file contents:" -ForegroundColor Cyan
            Get-Content $configFile | ForEach-Object { Write-Host "  $_" -ForegroundColor White }
          } else {
            Write-Host "✗ Config file NOT found at: $configFile" -ForegroundColor Red
            Write-Host "Available files:" -ForegroundColor Yellow
            Get-ChildItem -Path "${{ github.workspace }}" -Recurse -File | ForEach-Object { 
              Write-Host "  $($_.FullName.Replace('${{ github.workspace }}', '.'))" -ForegroundColor White 
            }
          }
          
      - name: Get BUILD value from Configure-CICD.txt
        id: get_build
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          if (-not (Test-Path $configFile)) {
            Write-Error "Configuration file not found: $configFile"
            exit 1
          }
          $build = (Get-Content $configFile | Where-Object { $_ -match '^BUILD[ ]*-[ ]*(.+)$' }) -replace '^BUILD[ ]*-[ ]*',''
          Write-Host "BUILD value: $build" -ForegroundColor Green
          echo "build=$build" >> $env:GITHUB_OUTPUT
          
      - name: Get RUN value from Configure-CICD.txt
        id: get_run
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $run = (Get-Content $configFile | Where-Object { $_ -match '^RUN[ ]*-[ ]*(.+)$' }) -replace '^RUN[ ]*-[ ]*',''
          Write-Host "RUN value: $run" -ForegroundColor Green
          echo "run=$run" >> $env:GITHUB_OUTPUT
          
      - name: Get DEPLOY value from Configure-CICD.txt
        id: get_deploy
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $deploy = (Get-Content $configFile | Where-Object { $_ -match '^DEPLOY[ ]*-[ ]*(.+)$' }) -replace '^DEPLOY[ ]*-[ ]*',''
          Write-Host "DEPLOY value: $deploy" -ForegroundColor Green
          echo "deploy=$deploy" >> $env:GITHUB_OUTPUT
          
      - name: Write ENVIRONMENT value to file
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $envValue = (Get-Content $configFile | Where-Object { $_ -match '^[ ]*ENVIRONMENT[ ]*-[ ]*(.+)$' }) -replace '^[ ]*ENVIRONMENT[ ]*-[ ]*',''
          Write-Host "ENVIRONMENT value: $envValue" -ForegroundColor Green
          
          $outputPath = 'C:\Automation Team\CICD'
          if (!(Test-Path $outputPath)) { New-Item -Path $outputPath -ItemType Directory -Force }
          $envFile = Join-Path $outputPath 'environment.txt'
          Remove-Item -Path $envFile -Force -ErrorAction SilentlyContinue
          Set-Content -Path $envFile -Value $envValue
          Write-Host "Environment file written to: $envFile" -ForegroundColor Green

  build-uipath-nuget-package:
    needs: [config]
    if: needs.config.outputs.build == 'Yes'
    runs-on: self-hosted
    steps: 
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          force: true
          
      # ... rest of build steps remain the same

  run-uipath-nuget-package:
    needs: [config]
    if: needs.config.outputs.run == 'Yes'
    runs-on: self-hosted
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          force: true
          
      - name: Debug - Repository checkout verification
        shell: pwsh
        run: |
          Write-Host "=== POST-CHECKOUT VERIFICATION ===" -ForegroundColor Yellow
          Write-Host "Workspace: ${{ github.workspace }}" -ForegroundColor Cyan
          Write-Host "Current directory: $(Get-Location)" -ForegroundColor Cyan
          
          Write-Host "Repository root contents:" -ForegroundColor Green
          Get-ChildItem -Path "${{ github.workspace }}" -Force | ForEach-Object { 
            $type = if ($_.PSIsContainer) { "DIR " } else { "FILE" }
            Write-Host "  $type $($_.Name)" -ForegroundColor White
          }
          
          # Check for critical files
          $criticalFiles = @(
            "Configue-CICD.txt",
            "project.json", 
            "scripts/UiPathRun.ps1",
            "scripts/UiPathPack.ps1"
          )
          
          Write-Host "`nCritical files check:" -ForegroundColor Green
          foreach ($file in $criticalFiles) {
            $fullPath = Join-Path "${{ github.workspace }}" $file
            if (Test-Path $fullPath) {
              Write-Host "  ✓ $file" -ForegroundColor Green
            } else {
              Write-Host "  ✗ $file (MISSING!)" -ForegroundColor Red
            }
          }
          
          # Check scripts directory specifically
          $scriptsDir = Join-Path "${{ github.workspace }}" "scripts"
          if (Test-Path $scriptsDir) {
            Write-Host "`nScripts directory contents:" -ForegroundColor Green
            Get-ChildItem -Path $scriptsDir -Force | ForEach-Object { 
              Write-Host "  $($_.Name)" -ForegroundColor White
            }
          } else {
            Write-Host "`n✗ Scripts directory not found!" -ForegroundColor Red
          }
          
      # ... rest of your run steps
