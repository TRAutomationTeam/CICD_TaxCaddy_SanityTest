name: Development workflow

on:
  push:
    branches:
      - main
    paths:
      - 'Configue-CICD.txt'

env: 
  PROJECT_FOLDER: ${{ github.action_path }}
  ORCH_URL: ${{ secrets.UIPATH_ORCH_URL }}
  ORCH_TENANT: ${{ secrets.UIPATH_TENANT_ID }}
  ORCH_CLIENT_ID: ${{ secrets.UIPATH_CLIENT_ID }}
  ORCH_USER_KEY: ${{ secrets.UIPATH_USER_KEY }}
  ORCH_ACC_NAME: ${{ secrets.UIPATH_ACCOUNT_ID }}

jobs:
  print-details:
    runs-on: self-hosted
    steps:
      - name: echo-default-env-variables
        shell: pwsh
        run: |
          Write-Host "=== ENVIRONMENT VARIABLES ===" -ForegroundColor Yellow
          Write-Host "Home: $env:HOME"
          Write-Host "GITHUB_WORKFLOW: $env:GITHUB_WORKFLOW"
          Write-Host "GITHUB_ACTIONS: $env:GITHUB_ACTIONS"
          Write-Host "GITHUB_ACTOR: $env:GITHUB_ACTOR"
          Write-Host "GITHUB_REPOSITORY: $env:GITHUB_REPOSITORY"
          Write-Host "GITHUB_EVENT_NAME: $env:GITHUB_EVENT_NAME"
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "GITHUB_SHA: $env:GITHUB_SHA"
          Write-Host "GITHUB_REF: $env:GITHUB_REF"

  # ‚úÖ ENHANCED CLEANER - Force remove all files including hidden/system files
  cleaner:
    runs-on: self-hosted
    steps:
      - name: Force clean workspace with enhanced permissions
        shell: pwsh
        run: |
          Write-Host "=== ENHANCED WORKSPACE CLEANING ===" -ForegroundColor Yellow
          $workspace = "${{ github.workspace }}"
          Write-Host "Target workspace: $workspace" -ForegroundColor Cyan
          
          if (Test-Path $workspace) {
            Write-Host "Workspace exists, performing deep clean..." -ForegroundColor Yellow
            
            # Method 1: Try PowerShell removal first
            try {
              Get-ChildItem -Path $workspace -Force -Recurse -ErrorAction SilentlyContinue | 
                ForEach-Object { 
                  try {
                    $_.Delete()
                  } catch {
                    Write-Host "Could not delete: $($_.FullName)" -ForegroundColor Red
                  }
                }
              
              # Remove the directories
              Get-ChildItem -Path $workspace -Directory -Force -ErrorAction SilentlyContinue | 
                Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
                
              # Remove remaining files
              Get-ChildItem -Path $workspace -File -Force -ErrorAction SilentlyContinue | 
                Remove-Item -Force -ErrorAction SilentlyContinue
                
            } catch {
              Write-Host "PowerShell cleanup failed: $_" -ForegroundColor Red
            }
            
            # Method 2: Use CMD for stubborn files (Windows)
            if ($IsWindows -or $env:OS -eq "Windows_NT") {
              Write-Host "Using CMD for Windows cleanup..." -ForegroundColor Yellow
              try {
                cmd /c "rmdir /s /q `"$workspace`" 2>nul"
                cmd /c "del /f /s /q `"$workspace\*.*`" 2>nul"
              } catch {
                Write-Host "CMD cleanup had issues: $_" -ForegroundColor Red
              }
            }
            
            # Method 3: Create fresh directory
            if (-not (Test-Path $workspace)) {
              New-Item -ItemType Directory -Path $workspace -Force | Out-Null
              Write-Host "Created fresh workspace directory" -ForegroundColor Green
            }
            
          } else {
            Write-Host "Workspace doesn't exist, creating..." -ForegroundColor Green
            New-Item -ItemType Directory -Path $workspace -Force | Out-Null
          }
          
      - name: Verify complete cleanup
        shell: pwsh
        run: |
          Write-Host "=== CLEANUP VERIFICATION ===" -ForegroundColor Yellow
          $workspace = "${{ github.workspace }}"
          
          if (Test-Path $workspace) {
            $items = @(Get-ChildItem -Path $workspace -Force -Recurse -ErrorAction SilentlyContinue)
            if ($items.Count -eq 0) {
              Write-Host "‚úÖ Workspace is completely clean" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è $($items.Count) items still present:" -ForegroundColor Yellow
              $items | ForEach-Object { Write-Host "  $($_.FullName)" -ForegroundColor Red }
            }
          } else {
            Write-Host "‚úÖ Workspace directory ready" -ForegroundColor Green
          }

  config:
    needs: [cleaner]
    runs-on: self-hosted
    outputs:
      build: ${{ steps.get_build.outputs.build }}
      run: ${{ steps.get_run.outputs.run }}
      deploy: ${{ steps.get_deploy.outputs.deploy }}
    steps:
      # ‚úÖ ENHANCED CHECKOUT - Force fresh checkout with all options
      - name: Force fresh repository checkout
        uses: actions/checkout@v4
        with:
          # Force a complete fresh checkout
          fetch-depth: 0          # Fetch all history
          clean: true             # Clean the repository  
          force: true             # Force clean even if local changes
          submodules: false       # Don't checkout submodules (can cause issues)
          token: ${{ github.token }}
          
      # ‚úÖ ADDITIONAL CLEANUP AFTER CHECKOUT
      - name: Post-checkout cleanup verification
        shell: pwsh
        run: |
          Write-Host "=== POST-CHECKOUT VERIFICATION ===" -ForegroundColor Yellow
          $workspace = "${{ github.workspace }}"
          
          # Remove any potential Git locks or temp files
          $gitLockFiles = @(
            "$workspace\.git\index.lock",
            "$workspace\.git\HEAD.lock",
            "$workspace\.git\config.lock"
          )
          
          foreach ($lockFile in $gitLockFiles) {
            if (Test-Path $lockFile) {
              Remove-Item $lockFile -Force -ErrorAction SilentlyContinue
              Write-Host "Removed Git lock: $lockFile" -ForegroundColor Yellow
            }
          }
          
          # Verify key files exist
          $criticalFiles = @("Configue-CICD.txt", "project.json")
          foreach ($file in $criticalFiles) {
            $fullPath = Join-Path $workspace $file
            if (Test-Path $fullPath) {
              $lastWrite = (Get-Item $fullPath).LastWriteTime
              Write-Host "‚úÖ $file (Modified: $lastWrite)" -ForegroundColor Green
            } else {
              Write-Host "‚ùå Missing: $file" -ForegroundColor Red
            }
          }
          
          # Show all repository contents with timestamps
          Write-Host "`nüìÅ Repository Contents:" -ForegroundColor Cyan
          Get-ChildItem -Path $workspace -Force | ForEach-Object {
            $type = if ($_.PSIsContainer) { "üìÅ" } else { "üìÑ" }
            Write-Host "  $type $($_.Name) (Modified: $($_.LastWriteTime))" -ForegroundColor White
          }
          
      - name: Get BUILD value from Configure-CICD.txt
        id: get_build
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          if (-not (Test-Path $configFile)) {
            Write-Error "‚ùå Configuration file not found: $configFile"
            Write-Host "Available files:" -ForegroundColor Yellow
            Get-ChildItem "${{ github.workspace }}" | ForEach-Object { Write-Host "  $($_.Name)" }
            exit 1
          }
          
          Write-Host "üìñ Reading config from: $configFile" -ForegroundColor Cyan
          $content = Get-Content $configFile -Raw
          Write-Host "File content length: $($content.Length) characters" -ForegroundColor Yellow
          
          $build = (Get-Content $configFile | Where-Object { $_ -match '^BUILD[ ]*-[ ]*(.
