name: Development workflow

on:
  push:
    branches:
      - main
    paths:
      - 'Configue-CICD.txt'

# Here the environment variable is declared in workflow levels 
env: 
  # Replace with your Orchestrator Values 
  PROJECT_FOLDER: ${{ github.action_path }}
  ORCH_URL: ${{ secrets.UIPATH_ORCH_URL }}
  ORCH_TENANT: ${{ secrets.UIPATH_TENANT_ID }}
  ORCH_CLIENT_ID: ${{ secrets.UIPATH_CLIENT_ID }}
  ORCH_USER_KEY: ${{ secrets.UIPATH_USER_KEY }}
  ORCH_ACC_NAME: ${{ secrets.UIPATH_ACCOUNT_ID }}
  # Add these new environment variables for external app authentication
  ORCH_APP_ID: ${{ secrets.UIPATH_APP_ID }}
  ORCH_APP_SECRET: ${{ secrets.UIPATH_APP_SECRET }}
  ORCH_APP_SCOPE: ${{ secrets.UIPATH_APP_SCOPE }}

jobs:
  print-details:
    runs-on: self-hosted
    steps:
      - name: echo-default-env-variables
        run: |
          Write-Host "Home: $env:HOME"
          Write-Host "GITHUB_WORKFLOW: $env:GITHUB_WORKFLOW"
          Write-Host "GITHUB_ACTIONS: $env:GITHUB_ACTIONS"
          Write-Host "GITHUB_ACTOR: $env:GITHUB_ACTOR"
          Write-Host "GITHUB_REPOSITORY: $env:GITHUB_REPOSITORY"
          Write-Host "GITHUB_EVENT_NAME: $env:GITHUB_EVENT_NAME"
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "GITHUB_SHA: $env:GITHUB_SHA"
          Write-Host "GITHUB_REF: $env:GITHUB_REF"
          
  cleaner:
    runs-on: self-hosted
    steps:
      - name: Force cleanup workspace directory
        shell: pwsh
        run: |
          Write-Host "Cleaning up previous run - Force cleanup for self-hosted runner"
          $workspacePath = "${{ github.workspace }}"
          Write-Host "Workspace path: $workspacePath"
          
          # Stop any processes that might be using files in the workspace
          Get-Process | Where-Object { $_.Path -like "$workspacePath*" } | Stop-Process -Force -ErrorAction SilentlyContinue
          
          # Wait a moment for processes to stop
          Start-Sleep -Seconds 3
          
          # Force remove with different approaches for stubborn files
          if (Test-Path $workspacePath) {
            try {
              # First attempt: Normal removal
              Remove-Item -Path $workspacePath -Recurse -Force -ErrorAction Stop
              Write-Host "✓ Workspace cleaned successfully"
            }
            catch {
              Write-Host "First cleanup attempt failed: $($_.Exception.Message)"
              try {
                # Second attempt: Remove .git folder separately (common issue)
                $gitPath = Join-Path $workspacePath ".git"
                if (Test-Path $gitPath) {
                  Write-Host "Removing .git folder separately..."
                  cmd /c "rmdir /s /q `"$gitPath`""
                }
                # Then remove the rest
                Remove-Item -Path $workspacePath -Recurse -Force -ErrorAction Stop
                Write-Host "✓ Workspace cleaned on second attempt"
              }
              catch {
                Write-Host "Second cleanup attempt failed: $($_.Exception.Message)"
                # Third attempt: Use cmd rmdir for Windows
                try {
                  Write-Host "Using cmd rmdir for final cleanup..."
                  cmd /c "rmdir /s /q `"$workspacePath`""
                  Write-Host "✓ Workspace cleaned with cmd rmdir"
                }
                catch {
                  Write-Host "⚠️ Warning: Could not fully clean workspace. Some files may remain."
                  Write-Host "Error: $($_.Exception.Message)"
                  # Don't fail the job, just warn
                }
              }
            }
          }
          
          # Ensure the directory exists for the next job
          if (-not (Test-Path $workspacePath)) {
            New-Item -Path $workspacePath -ItemType Directory -Force
            Write-Host "✓ Created fresh workspace directory"
          }

  config:
    runs-on: self-hosted
    needs: cleaner
    outputs:
      build: ${{ steps.get_build.outputs.build }}
      run: ${{ steps.get_run.outputs.run }}
      deploy: ${{ steps.get_deploy.outputs.deploy }}
    steps:
      - name: Pre-checkout cleanup and verification
        shell: pwsh
        run: |
          Write-Host "Pre-checkout verification for self-hosted runner"
          $workspacePath = "${{ github.workspace }}"
          Write-Host "Workspace path: $workspacePath"
          
          # List any remaining files
          if (Test-Path $workspacePath) {
            Write-Host "Current workspace contents:"
            Get-ChildItem -Path $workspacePath -Force -ErrorAction SilentlyContinue | ForEach-Object { 
              Write-Host "  - $($_.Name) ($($_.GetType().Name))"
            }
          } else {
            Write-Host "Workspace directory does not exist, creating it..."
            New-Item -Path $workspacePath -ItemType Directory -Force
          }
      
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags
          fetch-depth: 0
          # Clean the workspace before checkout (important for self-hosted runners)
          clean: true
          # Force checkout to overwrite any existing files
          force: true
          # Set safe directory to avoid git ownership issues
          set-safe-directory: true
          # Disable LFS for faster checkout if not needed
          lfs: false
      
      - name: Post-checkout verification
        shell: pwsh
        run: |
          Write-Host "Post-checkout verification"
          Write-Host "Current working directory: $(Get-Location)"
          Write-Host "Workspace path: ${{ github.workspace }}"
          
          Write-Host "`nWorkspace contents after checkout:"
          Get-ChildItem -Path "${{ github.workspace }}" -Force | ForEach-Object { 
            Write-Host "  - $($_.Name) ($($_.GetType().Name))"
            if ($_.PSIsContainer) {
              Get-ChildItem -Path $_.FullName -Force -ErrorAction SilentlyContinue | Select-Object -First 5 | ForEach-Object {
                Write-Host "    - $($_.Name)"
              }
            }
          }
          
          Write-Host "`nChecking for required files:"
          # Check for config file
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          if (Test-Path $configFile) {
            Write-Host "✓ Configue-CICD.txt found"
            Write-Host "Config file contents:"
            Get-Content $configFile | ForEach-Object { Write-Host "  $_" }
          } else {
            Write-Host "✗ Configue-CICD.txt NOT found at: $configFile"
            Write-Host "Available files in workspace:"
            Get-ChildItem -Path "${{ github.workspace }}" -Recurse -File | Select-Object FullName | ForEach-Object { Write-Host "  $($_.FullName)" }
            exit 1
          }
          
          # Check for scripts directory
          $scriptsDir = "${{ github.workspace }}/scripts"
          if (Test-Path $scriptsDir) {
            Write-Host "✓ Scripts directory found"
            Get-ChildItem $scriptsDir | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Host "⚠️ Scripts directory not found at: $scriptsDir"
          }
      
      - name: Get BUILD value from Configure-CICD.txt
        id: get_build
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          if (-not (Test-Path $configFile)) {
            Write-Host "Config file not found at: $configFile"
            exit 1
          }
          $build = (Get-Content $configFile | Where-Object { $_ -match '^BUILD[ ]*-[ ]*(.+)$' }) -replace '^BUILD[ ]*-[ ]*',''
          Write-Host "BUILD value: '$build'"
          echo "build=$build" >> $env:GITHUB_OUTPUT
      
      - name: Get RUN value from Configure-CICD.txt
        id: get_run
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $run = (Get-Content $configFile | Where-Object { $_ -match '^RUN[ ]*-[ ]*(.+)$' }) -replace '^RUN[ ]*-[ ]*',''
          Write-Host "RUN value: '$run'"
          echo "run=$run" >> $env:GITHUB_OUTPUT
      
      - name: Get DEPLOY value from Configure-CICD.txt
        id: get_deploy
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $deploy = (Get-Content $configFile | Where-Object { $_ -match '^DEPLOY[ ]*-[ ]*(.+)$' }) -replace '^DEPLOY[ ]*-[ ]*',''
          Write-Host "DEPLOY value: '$deploy'"
          echo "deploy=$deploy" >> $env:GITHUB_OUTPUT
      
      - name: Write ENVIRONMENT value to file
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $envValue = (Get-Content $configFile | Where-Object { $_ -match '^[ ]*ENVIRONMENT[ ]*-[ ]*(.+)$' }) -replace '^[ ]*ENVIRONMENT[ ]*-[ ]*',''
          Write-Host "ENVIRONMENT value: '$envValue'"
          $outputPath = 'C:\Automation Team\CICD'
          if (!(Test-Path $outputPath)) { New-Item -Path $outputPath -ItemType Directory -Force }
          $envFile = Join-Path $outputPath 'environment.txt'
          Remove-Item -Path $envFile -Force -ErrorAction SilentlyContinue
          Set-Content -Path $envFile -Value $envValue

  build-uipath-nuget-package:
    needs: [config]
    if: needs.config.outputs.build == 'Yes'
    runs-on: self-hosted
    steps: 
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          force: true
          set-safe-directory: true
          lfs: false
      
      - name: Verify repository structure
        shell: pwsh
        run: |
          Write-Host "Verifying repository structure for build job"
          Write-Host "Workspace: ${{ github.workspace }}"
          
          # Check for required files and directories
          $requiredItems = @(
            @{Path="Configue-CICD.txt"; Type="File"},
            @{Path="scripts"; Type="Directory"},
            @{Path="scripts/UiPathPack.ps1"; Type="File"},
            @{Path="project.json"; Type="File"}
          )
          
          foreach ($item in $requiredItems) {
            $fullPath = Join-Path "${{ github.workspace }}" $item.Path
            if (Test-Path $fullPath) {
              Write-Host "✓ $($item.Path) ($($item.Type)) found"
            } else {
              Write-Host "✗ $($item.Path) ($($item.Type)) NOT found at: $fullPath"
              if ($item.Type -eq "File") {
                Write-Host "This is required for the build process"
                exit 1
              }
            }
          }
      
      - name: Load config values from Configue-CICD.txt
        id: load_config
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}\Configue-CICD.txt"
          if (-not (Test-Path $configFile)) {
            Write-Host "Config file not found at: $configFile"
            exit 1
          }
          $config = Get-Content $configFile
          Write-Host "Processing config file with $($config.Count) lines"
          foreach ($line in $config) {
            if ($line -match '^[ ]*PROJECT_NAME[ ]*-[ ]*(.+)$') { 
              $value = $Matches[1].Trim()
              Write-Host "Found PROJECT_NAME: '$value'"
              echo "PROJECT_NAME=$value" >> $env:GITHUB_ENV 
            }
            if ($line -match '^[ ]*BRANCH[ ]*-[ ]*(.+)$') { 
              $value = $Matches[1].Trim()
              Write-Host "Found BRANCH: '$value'"
              echo "BRANCH=$value" >> $env:GITHUB_ENV 
            }
            if ($line -match '^[ ]*UIPATH_CLI_PATH[ ]*-[ ]*(.+)$') { 
              $value = $Matches[1].Trim()
              Write-Host "Found UIPATH_CLI_PATH: '$value'"
              echo "UIPATH_CLI_PATH=$value" >> $env:GITHUB_ENV 
            }
            if ($line -match '^[ ]*FOLDER_ORGANIZATION_UNIT[ ]*-[ ]*(.+)$') { 
              $value = $Matches[1].Trim()
              Write-Host "Found FOLDER_ORGANIZATION_UNIT: '$value'"
              echo "FOLDER_ORG_UNIT=$value" >> $env:GITHUB_ENV 
            }
            if ($line -match '^[ ]*FOLDER_DEPLOY_UNIT[ ]*-[ ]*(.+)$') { 
              $value = $Matches[1].Trim()
              Write-Host "Found FOLDER_DEPLOY_UNIT: '$value'"
              echo "FOLDER_DEPLOY_UNIT=$value" >> $env:GITHUB_ENV 
            }
            if ($line -match '^[ ]*MACHINE[ ]*-[ ]*(.+)$') { 
              $value = $Matches[1].Trim()
              Write-Host "Found MACHINE: '$value'"
              echo "MACHINE=$value" >> $env:GITHUB_ENV 
            }
            if ($line -match '^[ ]*ROBOT[ ]*-[ ]*(.+)$') { 
              $value = $Matches[1].Trim()
              Write-Host "Found ROBOT: '$value'"
              echo "ROBOT=$value" >> $env:GITHUB_ENV 
            }
            if ($line -match '^[ ]*TIMEOUT_SEC[ ]*-[ ]*(.+)$') { 
              $value = $Matches[1].Trim()
              Write-Host "Found TIMEOUT_SEC: '$value'"
              echo "TIMEOUT_SEC=$value" >> $env:GITHUB_ENV 
            }
          }
      
      - name: Print loaded config values
        shell: pwsh
        run: |
          Write-Host "Loaded configuration values:"
          Get-ChildItem Env: | Where-Object { $_.Name -in @('PROJECT_NAME','BRANCH','UIPATH_CLI_PATH','FOLDER_ORG_UNIT','FOLDER_DEPLOY_UNIT','MACHINE','ROBOT','TIMEOUT_SEC') } | ForEach-Object { Write-Host "  $($_.Name)=$($_.Value)" }
      
      - name: Build Nuget Package
        shell: powershell
        run: |
          $packScript = "${{ github.workspace }}\scripts\UiPathPack.ps1"
          $projectFile = "${{ github.workspace }}\project.json"
          $packageDir = "${{ github.workspace }}\package"
          
          Write-Host "Build parameters:"
          Write-Host "  Pack script: $packScript"
          Write-Host "  Project file: $projectFile"
          Write-Host "  Package directory: $packageDir"
          Write-Host "  CLI path: ${{ env.UIPATH_CLI_PATH }}"
          
          if (-not (Test-Path $packScript)) {
            Write-Host "UiPathPack.ps1 not found at: $packScript"
            exit 1
          }
          
          if (-not (Test-Path $projectFile)) {
            Write-Host "project.json not found at: $projectFile"
            exit 1
          }
          
          # Create package directory if it doesn't exist
          if (-not (Test-Path $packageDir)) {
            New-Item -Path $packageDir -ItemType Directory -Force
            Write-Host "Created package directory: $packageDir"
          }
          
          & $packScript $projectFile -destination_folder $packageDir -autoVersion -uipathCliFilePath "${{ env.UIPATH_CLI_PATH }}"
      
      - name: Upload UiPath Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: |
           package/*.*
           scripts/*.ps1
                    
  run-uipath-nuget-package:
      needs: [config]
      if: needs.config.outputs.run == 'Yes'
      runs-on: self-hosted
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            clean: true
            force: true
            set-safe-directory: true
            lfs: false
        
        - name: Verify repository structure for run job
          shell: pwsh
          run: |
            Write-Host "Verifying repository structure for run job"
            Write-Host "Workspace: ${{ github.workspace }}"
            
            # Check for required files
            $requiredItems = @(
              @{Path="Configue-CICD.txt"; Type="File"},
              @{Path="scripts"; Type="Directory"},
              @{Path="scripts/UiPathJobRun.ps1"; Type="File"}
            )
            
            foreach ($item in $requiredItems) {
              $fullPath = Join-Path "${{ github.workspace }}" $item.Path
              if (Test-Path $fullPath) {
                Write-Host "✓ $($item.Path) ($($item.Type)) found"
              } else {
                Write-Host "✗ $($item.Path) ($($item.Type)) NOT found at: $fullPath"
                Write-Host "This is required for the run process"
                exit 1
              }
            }
        
        - name: Load config values from Configue-CICD.txt
          id: load_config
          shell: pwsh
          run: |
            $configFile = "${{ github.workspace }}\Configue-CICD.txt"
            if (-not (Test-Path $configFile)) {
              Write-Host "Config file not found at: $configFile"
              exit 1
            }
            $config = Get-Content $configFile
            Write-Host "Processing config file with $($config.Count) lines"
            foreach ($line in $config) {
              if ($line -match '^[ ]*PROJECT_NAME[ ]*-[ ]*(.+)$') { 
                $value = $Matches[1].Trim()
                Write-Host "Found PROJECT_NAME: '$value'"
                echo "PROJECT_NAME=$value" >> $env:GITHUB_ENV 
              }
              if ($line -match '^[ ]*BRANCH[ ]*-[ ]*(.+)$') { 
                $value = $Matches[1].Trim()
                Write-Host "Found BRANCH: '$value'"
                echo "BRANCH=$value" >> $env:GITHUB_ENV 
              }
              if ($line -match '^[ ]*UIPATH_CLI_PATH[ ]*-[ ]*(.+)$') { 
                $value = $Matches[1].Trim()
                Write-Host "Found UIPATH_CLI_PATH: '$value'"
                echo "UIPATH_CLI_PATH=$value" >> $env:GITHUB_ENV 
              }
              if ($line -match '^[ ]*FOLDER_ORGANIZATION_UNIT[ ]*-[ ]*(.+)$') { 
                $value = $Matches[1].Trim()
                Write-Host "Found FOLDER_ORGANIZATION_UNIT: '$value'"
                echo "FOLDER_ORG_UNIT=$value" >> $env:GITHUB_ENV 
              }
              if ($line -match '^[ ]*FOLDER_DEPLOY_UNIT[ ]*-[ ]*(.+)$') { 
                $value = $Matches[1].Trim()
                Write-Host "Found FOLDER_DEPLOY_UNIT: '$value'"
                echo "FOLDER_DEPLOY_UNIT=$value" >> $env:GITHUB_ENV 
              }
              if ($line -match '^[ ]*MACHINE[ ]*-[ ]*(.+)$') { 
                $value = $Matches[1].Trim()
                Write-Host "Found MACHINE: '$value'"
                echo "MACHINE=$value" >> $env:GITHUB_ENV 
              }
              if ($line -match '^[ ]*ROBOT[ ]*-[ ]*(.+)$') { 
                $value = $Matches[1].Trim()
                Write-Host "Found ROBOT: '$value'"
                echo "ROBOT=$value" >> $env:GITHUB_ENV 
              }
              if ($line -match '^[ ]*TIMEOUT_SEC[ ]*-[ ]*(.+)$') { 
                $value = $Matches[1].Trim()
                Write-Host "Found TIMEOUT_SEC: '$value'"
                echo "TIMEOUT_SEC=$value" >> $env:GITHUB_ENV 
              }
            }
        
        - name: Print loaded config values
          shell: pwsh
          run: |
            Write-Host "Loaded configuration values:"
            Get-ChildItem Env: | Where-Object { $_.Name -in @('PROJECT_NAME','BRANCH','UIPATH_CLI_PATH','FOLDER_ORG_UNIT','FOLDER_DEPLOY_UNIT','MACHINE','ROBOT','TIMEOUT_SEC') } | ForEach-Object { Write-Host "  $($_.Name)=$($_.Value)" }
        
        - name: run Package
          shell: powershell
          env:
            UIPATH_APP_SECRET: ${{ secrets.UIPATH_APP_SECRET }}
            UIPATH_APP_SCOPE: ${{ secrets.UIPATH_APP_SCOPE }}
          run: |
            Write-Host "Starting UiPath job run"
            Write-Host "PROJECT_NAME from config: ${{ env.PROJECT_NAME }}"
            
            $jobRunScript = "${{ github.workspace }}\scripts\UiPathJobRun.ps1"
            if (-not (Test-Path $jobRunScript)) {
              Write-Host "UiPathJobRun.ps1 not found at: $jobRunScript"
              exit 1
            }
            
            Write-Host "Job run parameters:"
            Write-Host "  Process Name: ${{ env.PROJECT_NAME }}"
            Write-Host "  Orchestrator URL: ${{ env.ORCH_URL }}"
            Write-Host "  Tenant: ${{ env.ORCH_TENANT }}"
            Write-Host "  Account: ${{ env.ORCH_ACC_NAME }}"
            Write-Host "  Folder: ${{ env.FOLDER_ORG_UNIT }}"
            Write-Host "  Machine: ${{ env.MACHINE }}"
            Write-Host "  Robot: ${{ env.ROBOT }}"
            Write-Host "  CLI Path: ${{ env.UIPATH_CLI_PATH }}"
            Write-Host "  Timeout: ${{ env.TIMEOUT_SEC }}"
            
            # Use environment variables directly to avoid parsing issues with special characters
            & $jobRunScript `
              -processName "${{ env.PROJECT_NAME }}" `
              -uriOrch "${{ env.ORCH_URL }}" `
              -tenantlName "${{ env.ORCH_TENANT }}" `
              -accountForApp "${{ env.ORCH_ACC_NAME }}" `
              -applicationId "${{ env.ORCH_APP_ID }}" `
              -applicationSecret $env:UIPATH_APP_SECRET `
              -applicationScope $env:UIPATH_APP_SCOPE `
              -accountName "${{ env.ORCH_ACC_NAME }}" `
              -folder_organization_unit "${{ env.FOLDER_ORG_UNIT }}" `
              -machine "${{ env.MACHINE }}" `
              -robots "${{ env.ROBOT }}" `
              -uipathCliFilePath "${{ env.UIPATH_CLI_PATH }}" `
              -timeout "${{ env.TIMEOUT_SEC }}"

  publish-uipath-nuget-package:
    needs: [run-uipath-nuget-package, config]
    if: needs.config.outputs.deploy == 'Yes'
    runs-on: self-hosted
    steps: 
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          force: true
          set-safe-directory: true
          lfs: false
      
      - name: Download UiPath Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
      
      - name: Load config values from Configue-CICD.txt
        id: load_config
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}\Configue-CICD.txt"
          if (-not (Test-Path $configFile)) {
            Write-Host "Config file not found at: $configFile"
            exit 1
          }
          $config = Get-Content $configFile
          foreach ($line in $config) {
            if ($line -match '^[ ]*UIPATH_CLI_PATH[ ]*-[ ]*(.+)$') { echo "UIPATH_CLI_PATH=$($Matches[1].Trim())" >> $env:GITHUB_ENV }
            if ($line -match '^[ ]*FOLDER_ORGANIZATION_UNIT[ ]*-[ ]*(.+)$') { echo "FOLDER_ORG_UNIT=$($Matches[1].Trim())" >> $env:GITHUB_ENV }
            if ($line -match '^[ ]*FOLDER_DEPLOY_UNIT[ ]*-[ ]*(.+)$') { echo "FOLDER_DEPLOY_UNIT=$($Matches[1].Trim())" >> $env:GITHUB_ENV }
          }
      
      - name: Publish Nuget Package to DEV
        shell: powershell
        run: |
          $deployScript = "${{ github.workspace }}\scripts\UiPathDeploy.ps1"
          if (-not (Test-Path $deployScript)) {
            Write-Host "UiPathDeploy.ps1 not found at: $deployScript"
            exit 1
          }
          & $deployScript "${{ github.workspace }}\package" "${{env.ORCH_URL}}" "${{env.ORCH_TENANT}}" -UserKey "${{env.ORCH_USER_KEY}}" -account_name "${{env.ORCH_ACC_NAME}}" -folder_organization_unit "${{ env.FOLDER_DEPLOY_UNIT }}" -uipathCliFilePath "${{ env.UIPATH_CLI_PATH }}"
